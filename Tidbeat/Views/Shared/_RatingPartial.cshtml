@using Tidbeat.Enums
@model Tuple<int, int, RatingType>
@{
    var id = Guid.NewGuid().ToString();

}

<div id=@id class="rating">
@for (int i = 1; i <= 5; i++) {
    if (i <= Model.Item1)
    {
            <i class="bi bi-star-fill pointer-event" role="button"></i>
    }
    else
    {
            <i class="bi bi-star" role="button"></i>
    }
}
</div>

<script>
    (function () {
        let element = document.getElementById('@id');
        let stars = element.querySelectorAll('i');
        let hasSelected = false;
        let highestStarIndex = -1;

        stars.forEach((star, index) => {
          hoveredStarsRef = hoveredStars(index);
          resetStarsRef = resetStarsSelected(index);

          star.addEventListener('mouseover', hoveredStarsRef);

          star.addEventListener('mouseout', resetStarsRef);

          star.addEventListener('click', () => {
            resetStars();
            hasSelected = false;
            if (highestStarIndex === index) {
                highestStarIndex = -1;
                return;
            }

            for (let i = 0; i <= index; i++) {
                stars[i].classList.add('bi-star-fill');
                stars[i].classList.remove('bi-star');
                stars[i].classList.remove('hovered-star-color');
            }
            getAverageRating();
            hasUserRated();
            highestStarIndex = index;
            hasSelected = true;
          });
        });

        function hoveredStars(index) {
            return () => {
            
                for (let i = 0; i <= index; i++) {
                    stars[i].classList.add('bi-star-fill');
                    stars[i].classList.add('hovered-star-color');
                    stars[i].classList.remove('bi-star');
                }
            }
        }

        function resetStarsSelected(index) {
            return () => {
                if (hasSelected) {
                    resetPreviousState();
                    return;
                }
                resetStars();
            }
        }

        function resetStars() {
            for (let i = 0; i < stars.length; i++) {
                stars[i].classList.add('bi-star');
                stars[i].classList.remove('bi-star-fill');
                stars[i].classList.remove('hovered-star-color');
            }
        }

        function resetPreviousState() {
            if (highestStarIndex === -1) return;
            resetStars();
            for (let i = 0; i <= highestStarIndex; i++) {
                stars[i].classList.add('bi-star-fill');
                stars[i].classList.remove('bi-star');
                stars[i].classList.remove('hovered-star-color');
            }
        }

        function getAverageRating() {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '/RatingPartial/GetAverageRatings?type=@(Model.Item3)&postId=@(Model.Item2)');
            xhr.onload = function () {
                if (xhr.status === 200) {
                    var response = xhr.responseText;
                    console.log(response);
                } else {
                    console.log('Request failed.  Returned status of ' + xhr.status);
                }
            };
            xhr.send();
        }

        function hasUserRated() {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '/RatingPartial/HasUserRated?type=@(Model.Item3)&postId=@(Model.Item2)');
            xhr.onload = function () {
                if (xhr.status === 200) {
                    var response = xhr.responseText;
                    console.log(response);
                } else {
                    console.log('Request failed.  Returned status of ' + xhr.status);
                }
            };
            xhr.send();
        }

    })();
</script>