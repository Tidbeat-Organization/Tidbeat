@model Tidbeat.Models.Conversation
@using Tidbeat.Enums

@{
    ViewData["Title"] = "Details";
    var messageIndex = 0;
    var mostRecentCurrentUserMessageIndex = 0;
    foreach (var message in ViewBag.Messages)
    {
        if (message.User.Id == ViewBag.CurrentUser.Id)
        {
            mostRecentCurrentUserMessageIndex = messageIndex;
        }
        messageIndex++;
    }
    messageIndex = 0;
}

<h1>Detalhes</h1>

<h2 class="user-info">
    <div class="arrow-icon d-flex align-items-center mt-3">
        <a href="@Url.Action("Index", "Conversations")" title="Voltar às conversas">
            <i class="bi bi-arrow-left-circle fs-1 me-5 mb-5"></i>
        </a>
    </div>
    <div>
        <a href="@Url.Action("Details", "Profiles", new { id = ViewBag.CurrentUser.Id })">
            <img src="@((ViewBag.CurrentUser.ImagePath ?? "/images/UnknownUser.jpg"))" alt="@ViewBag.CurrentUser.FullName" title="Ver perfil do utilizador" width="100" height="100" />
        </a>
        <p>@ViewBag.CurrentUser.FullName</p>
    </div>
    <div class="arrow mb-4">&gt;</div>
    <div>
        <a href="@Url.Action("Details", "Profiles", new { id = ViewBag.OtherUser.Id })">
            <img src="@((ViewBag.OtherUser.ImagePath ?? "/images/UnknownUser.jpg"))" alt="@ViewBag.OtherUser.FullName" title="Ver perfil do utilizador" width="100" height="100" />
        </a>
        <p>@ViewBag.OtherUser.FullName</p>
    </div>
</h2>

<div class="container" style="height: calc(100% - 110px);">
    <div id="messages" style="background-color: whitesmoke; ">
        <button type="button" id="getRecentMessagesButton" class="@(ViewBag.Messages.Count >= 20 ? "" : "d-none")">Mais mensagens...</button>
        @foreach (var message in ViewBag.Messages)
        {
            @if (message.User.Id == ViewBag.CurrentUser.Id)
            {
                @if (messageIndex == mostRecentCurrentUserMessageIndex)
                {
                                <div data-message-id="@message.Id" class="message-entry">
                                    <div class="message-avatar pull-right">@message.User.FullName</div>
                                    <div class="delete-message-button bi bi-trash-fill text-danger pull-right btn hover-background-grey p-0 px-1"></div>
                                    <div class="edit-message-button bi bi-pencil-fill text-primary pull-right btn hover-background-grey p-0 px-1"></div>
                                    <div class="cancel-message-button bi bi-x text-danger btn hover-background-grey pull-right p-0 px-1 d-none"></div>
                                    <div class="save-message-button bi bi-check text-success btn hover-background-grey pull-right p-0 px-1 d-none"></div>
                                    <div class="d-flex flex-column pull-right">
                                        <input type="text" class="message-content-input message-content pull-right border-0 " style="max-width: 400px;" value="@message.Text" readonly />
                                        <div class="saved-content-temp d-none"></div>
                                        <div id="status-message" class="pull-right text-end">@((message.Status == (int)MessageStatus.Sent) ? "Enviado" : "Lido")</div>
                                    </div>
                                </div>
                }
                else
                {
                                <div data-message-id="@message.Id" class="message-entry">
                                    <div class="message-avatar pull-right">@message.User.FullName</div>
                                    <div class="delete-message-button bi bi-trash-fill text-danger pull-right btn hover-background-grey p-0 px-1"></div>
                                    <div class="edit-message-button bi-pencil-fill text-primary pull-right btn hover-background-grey p-0 px-1"></div>
                                    <div class="cancel-message-button bi bi-x text-danger btn hover-background-grey pull-right p-0 px-1 d-none"></div>
                                    <div class="save-message-button bi bi-check text-success btn hover-background-grey pull-right p-0 px-1 d-none"></div>
                                    <div class="pull-right">
                                        <input type="text" class="message-content-input message-content pull-right border-0 " style="max-width: 400px;" value="@message.Text" readonly />
                                        <div class="saved-content-temp d-none"></div>
                                    </div>
                                </div>
                }
            }
            else
            {
                        <div data-message-id="@message.Id" class="message-entry">
                            <div class="message-avatar pull-left">@message.User.FullName</div>
                            <div class="message-content-otheruser pull-left">@message.Text</div>
                        </div>
            }
            messageIndex++;
        }
    </div>

    <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 5px;">
        <textarea id="message"
                  style="width: 100%; padding: 5px 10px; border: 2px solid black; border-radius: 8px; "
                  placeholder="Digite a mensagem e pressione Enter para enviar..."></textarea>
        <div style="margin-left: 10px;">
            <button class="btn-success" id="sendmessage" title="Enviar mensagem">
                <i class="bi bi-chat-left-text"></i>
            </button>
        </div>
    </div>

</div>

<div class="modal alert alert-danger fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div>Connection Error...</div>
                <div><strong style="font-size: 1.5em;">Hit Refresh/F5</strong> to rejoin. ;)</div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.4/signalr.min.js" integrity="sha512-ulHhwQdGlX96gNSRsakG06STFdaQBUTbCX4KqLcYI428blEsttMkg2C3n2KtiYNDwnETBHXDg9ZAtvkfMHTYOQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function () {

        const generateRandomName = () =>
            Math.random().toString(36).substring(2, 10);

        let username = generateRandomName();
        const promptMessage = 'Enter your name:';
        do {
            username = "@ViewBag.CurrentUser.FullName";
            if (!username || username.startsWith('_') || username.indexOf('<') > -1 || username.indexOf('>') > -1) {
                username = '';
                promptMessage = 'Invalid input. Enter your name:';
            }
        } while (!username)

        const messageInput = document.getElementById('message');
        messageInput.focus();

        function createMessageEntry(encodedUserId, encodedMsg) {
            var entry = document.createElement('div');
            let statusMessage = document.getElementById('status-message');
            entry.classList.add("message-entry");
            if (encodedUserId === "_SYSTEM_") {
                entry.innerHTML = encodedMsg;
                entry.classList.add("text-center");
                entry.classList.add("system-message");
            } else if (encodedUserId === "_BROADCAST_") {
                entry.classList.add("text-center");
                entry.innerHTML = `<div class="text-center broadcast-message">${encodedMsg}</div>`;
            } else if (encodedUserId === '@ViewBag.CurrentUser.Id') {
                if (statusMessage) {
                    statusMessage.remove();
                }
                entry.innerHTML = rightMessage(encodedMsg, '@ViewBag.CurrentUser.FullName', @((int)MessageStatus.Sent))
            } else {
                entry.innerHTML = `<div class="message-avatar pull-left">@(ViewBag.OtherUser.FullName)</div>` +
                    `<div class="message-content-otheruser pull-left">${encodedMsg}<div>`;
            }
            return entry;
        }

        function bindConnectionMessage(connection) {
            var messageCallback = function (userId, message) {
                if (!message) return;
                //var encodedName = name;
                var encodedMsg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                var messageEntry = createMessageEntry(userId, encodedMsg);

                let statusMessage = document.getElementById('status-message');

                var messageBox = document.getElementById('messages');
                messageBox.appendChild(messageEntry);
                messageBox.scrollTop = messageBox.scrollHeight;
                connection.send('setSeenMessages', '@Model.Id', '@ViewBag.OtherUser.Id');
                setOtherUsersMessageToSeenInDatabase();
            };
            var seenCallback = function (userId) {
                if (userId === '@ViewBag.CurrentUser.Id') {
                    let statusMessage = document.getElementById('status-message');
                    if (statusMessage) {
                        statusMessage.innerHTML = "Lido";
                    }
                }
            };
            var editMessageCallback = function (messageId, newText) {
                let message = document.querySelector(`[data-message-id="${messageId}"]`);
                if (message) {
                    let messageContent = message.querySelector('.message-content');
                    if (messageContent) {
                        messageContent.textContent = newText;
                    }
                }
            }
            var deleteMessageCallback = function (messageId) {
                let message = document.querySelector(`[data-message-id="${messageId}"]`);
                if (message) {
                    message.remove();
                }
            };
            connection.on('broadcastMessage', messageCallback);
            connection.on('setSeenMessages', seenCallback);
            connection.on('editMessage', editMessageCallback);
            connection.on('deleteMessage', deleteMessageCallback);
            connection.onclose(onConnectionError);
        }

        function setOtherUsersMessageToSeenInDatabase() {
            fetch('/Conversations/SetUsersMessagesToSeen', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    userId: '@ViewBag.OtherUser.Id',
                    conversationId: '@Model.Id'
                })
            })
        }

        function saveMessageInDb(message) {
            fetch('/Conversations/SaveMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    text: message,
                    userId: '@ViewBag.CurrentUser.Id',
                    conversationId: '@Model.Id'
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log(data); // success response from server
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
        }

        function editMessageInDb(messageId, text) {
             fetch('/Conversations/EditMessage', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messageId: messageId,
                    text: text,
                    userId: '@ViewBag.CurrentUser.Id'
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
            })
            .then(data => {
                //console.log(data); // success response from server
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
        }

        function deleteMessageFromDb(messageId) {
             fetch('/Conversations/DeleteMessage', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messageId: messageId,
                    userId: '@ViewBag.CurrentUser.Id'
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
            })
            .then(data => {
                //console.log(data); // success response from server
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
        }

        function addOnClickToDeleteButtons() {
            var allDeleteButtons = document.getElementsByClassName('delete-message-button');
            for (var i = 0; i < allDeleteButtons.length; i++) {
                allDeleteButtons[i].addEventListener('click', function (event) {
                    var messageId = parseInt(event.target.parentElement.getAttribute('data-message-id'), 10);
                    connection.send('deleteMessage', '@Model.Id', messageId);
                    deleteMessageFromDb(messageId);
                    event.preventDefault();
                });
            }
        }

        function addOnClickToEditButtons() {
            var allEditButtons = document.getElementsByClassName('edit-message-button');
            for (var i = 0; i < allEditButtons.length; i++) {
                allEditButtons[i].addEventListener('click', function (event) {
                    var messageId = parseInt(event.target.parentElement.getAttribute('data-message-id'), 10);
                    var message = document.querySelector(`[data-message-id="${messageId}"]`);
                    var savedContentTemp = message.querySelector(`.saved-content-temp`);
                    savedContentTemp.textContent = message.querySelector(`.message-content-input`).value;
                    toggleEditMode(messageId);
                    event.preventDefault();
                });
            }
        }

        function addOnClickToSaveButtons() {
             var allSaveButtons = document.getElementsByClassName('save-message-button');
            for (var i = 0; i < allSaveButtons.length; i++) {
                allSaveButtons[i].addEventListener('click', function (event) {
                    var messageId = parseInt(event.target.parentElement.getAttribute('data-message-id'), 10);
                    var message = document.querySelector(`[data-message-id="${messageId}"]`);
                    var savedContentTemp = message.querySelector(`.saved-content-temp`);
                    savedContentTemp.textContent = "";
                    var messageInput = message.querySelector(`.message-content-input`);
                    connection.send("editMessage", '@Model.Id', messageId, messageInput.value);
                    editMessageInDb(messageId, messageInput.value);
                    toggleEditMode(messageId);
                    event.preventDefault();
                });
            }
        }

        function addOnClickToCancelButtons() {
            var allCancelButtons = document.getElementsByClassName('cancel-message-button');
            for (var i = 0; i < allCancelButtons.length; i++) {
                allCancelButtons[i].addEventListener('click', function (event) {
                    var messageId = parseInt(event.target.parentElement.getAttribute('data-message-id'), 10);
                    var message = document.querySelector(`[data-message-id="${messageId}"]`);
                    var messageInput = message.querySelector(`.message-content-input`);
                    var savedContentTemp = message.querySelector(`.saved-content-temp`);
                    messageInput.value = savedContentTemp.textContent;

                    savedContentTemp.textContent = "";
                    toggleEditMode(messageId);
                    event.preventDefault();
                });
            }
        }

        function toggleEditMode(messageId) {
            var message = document.querySelector(`[data-message-id="${messageId}"]`);
            var messageContent = message.querySelector('.message-content');
            var messageContentInput = message.querySelector('.message-content-input');
            var editButton = message.querySelector('.edit-message-button');
            var deleteButton = message.querySelector('.delete-message-button');
            var saveButton = message.querySelector('.save-message-button');
            var cancelButton = message.querySelector('.cancel-message-button');
            if (messageContentInput.readOnly) {
                messageContentInput.readOnly = false;
                messageContentInput.focus();
                messageContentInput.selectionStart = messageContentInput.value.length;
                messageContentInput.selectionEnd = messageContentInput.value.length;
                editButton.style.display = 'none';
                deleteButton.style.display = 'none';
                saveButton.classList.remove('d-none');
                cancelButton.classList.remove('d-none');
            } else {
                messageContentInput.readOnly = true;
                editButton.style.display = 'inline-block';
                saveButton.classList.add('d-none');
                cancelButton.classList.add('d-none');
                deleteButton.style.display = 'inline-block';
            }
        }

        function onConnected(connection) {
            console.log('connection started');
            connection.send('joinChat', '@Model.Id');
            connection.send('broadcastMessage', '@Model.Id', '_SYSTEM_', username + ' JUNTOU-SE À CONVERSA');
            connection.send('setSeenMessages', '@Model.Id', '@ViewBag.OtherUser.Id');
            setOtherUsersMessageToSeenInDatabase();
            document.getElementById('sendmessage').addEventListener('click', function (event) {
                if (messageInput.value) {
                    connection.send('broadcastMessage', '@Model.Id', '@ViewBag.CurrentUser.Id', messageInput.value);
                    saveMessageInDb(messageInput.value);
                }

                messageInput.value = '';
                messageInput.focus();
                event.preventDefault();
            });
            document.getElementById('message').addEventListener('keypress', function (event) {
                if (event.keyCode === 13) {
                    event.preventDefault();
                    document.getElementById('sendmessage').click();
                    return false;
                }
            });

            addOnClickToDeleteButtons();
            addOnClickToEditButtons();
            addOnClickToSaveButtons();
            addOnClickToCancelButtons();
        }

        function onConnectionError(error) {
            if (error && error.message) {
                console.error(error.message);
            }
            //connection.send('leaveChat', '@Model.Id');
            var modal = document.getElementById('myModal');
            modal.classList.add('in');
            modal.style = 'display: block;';
        }

        const connection = new signalR.HubConnectionBuilder()
            .withUrl('/chat')
            .build();
        bindConnectionMessage(connection);
        connection.start()
            .then(() => onConnected(connection))
            .catch(error => console.error(error.message));

        const getRecentMessagesButton = document.getElementById('getRecentMessagesButton');
        const messagesContainer = document.getElementById('messages');
        var skipAmount = @ViewBag.Messages.Count;

        getRecentMessagesButton.addEventListener('click', async () => {
            try {
                const conversationId = "@Model.Id";
                const messageAmount = @ViewBag.MessageAmountPerCall;

                const response = await fetch('/Conversations/GetRecentMessages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        conversationId: conversationId,
                        messageAmount: messageAmount,
                        skipAmount: skipAmount
                    })
                });

                if (!response.ok) {
                    throw new Error('Error getting recent messages.');
                }

                const messages = await response.json();
                console.log(messages);
                skipAmount += messages.length;
                updateMessagesContainer(messages);
            } catch (error) {
                console.error(error);
            }
        });

        function updateMessagesContainer(messages) {
            let messageIndex = 0;
            let statusMessage = document.getElementById('status-message');
            let statusMessageAlreadyExists = statusMessage !== null;

            let mostRecentMessageIndex = -1;
            for (let i = 0; i < messages.length; i++) {
                if (messages[i].user.id === "@ViewBag.CurrentUser.Id" && mostRecentMessageIndex == -1) {
                    mostRecentMessageIndex = i;
                }
            }

            messages.forEach((message) => {
                const messageElement = document.createElement('div');
                messageElement.classList.add("message-entry");
                messageElement.setAttribute('data-message-id', message.id);
                if (message.user.id === "@(ViewBag.CurrentUser.Id)") {
                    if (messageIndex == mostRecentMessageIndex && !statusMessageAlreadyExists) {
                        messageElement.innerHTML = rightMessage(message.text, message.user.fullName, message.status);
                    } else {
                        messageElement.innerHTML = rightMessage(message.text, message.user.fullName, undefined);
                    }
                } else {
                    messageElement.innerHTML = `<div class="message-avatar pull-left">${message.user.fullName}</div>` +
                        `<div class="message-content pull-left">${message.text}<div>`;
                }
                messageIndex++;
                messagesContainer.insertBefore(messageElement, messagesContainer.children[1]);
                if (messages.length < @ViewBag.MessageAmountPerCall) {
                    getRecentMessagesButton.style.display = 'none';
                }
            });
            addOnClickToDeleteButtons();
            addOnClickToEditButtons();
            addOnClickToSaveButtons();
            addOnClickToCancelButtons();
        }

        function rightMessage(message, name, status) {
            if (status === undefined) {
                return `<div class="message-avatar pull-right">${name}</div>` +
                    `<div class="delete-message-button bi bi-trash-fill text-danger pull-right btn hover-background-grey p-0 px-1"></div>
                     <div class="edit-message-button bi bi-pencil-fill text-primary pull-right btn hover-background-grey p-0 px-1"></div>
                     <div class="cancel-message-button bi bi-x text-danger btn hover-background-grey pull-right p-0 px-1 d-none"></div>
                     <div class="save-message-button bi bi-check text-success btn hover-background-grey pull-right p-0 px-1 d-none"></div>` +
                    `<div class="pull-right">
                        <input type="text" class="message-content-input message-content pull-right border-0 " style="max-width: 400px;" value="${message}" readonly />
                        <div class="saved-content-temp d-none"></div>
                    </div>`;
            }
            return `<div class="message-avatar pull-right">${name}</div>` +
                   `<div class="delete-message-button bi bi-trash-fill text-danger pull-right btn hover-background-grey p-0 px-1"></div>
                    <div class="edit-message-button bi bi-pencil-fill text-primary pull-right btn hover-background-grey p-0 px-1"></div>` +
                   `<div class="d-flex flex-column pull-right">
                       <input type="text" class="message-content-input message-content pull-right border-0 " style="max-width: 400px;" value="${message}" readonly />
                       <div class="saved-content-temp d-none"></div>
                       <div id="status-message" class="pull-right text-end">${status === @((int)MessageStatus.Sent) ? "Enviado" : "Lido"}</div>
                   </div>`;
        }
    });

</script>

<script>
    window.onload = function() {
        var message = document.getElementById("message");
        message.value = "";
        message.placeholder = "Digite a mensagem e pressione Enter para enviar...";
    };
</script>

<script>
    const message = document.getElementById('message');
    message.addEventListener('focus', () => {
        message.style.border = '2px solid #6610F2';
    });
    message.addEventListener('blur', () => {
        message.style.border = '2px solid black';
    });
</script>